pragma solidity ^0.5.2  ;

contract MedicalFactory{
    address owner;
    address[] patients;
    address[] providers;
    mapping(address => address) public profileAddress;
    modifier ownerOnly{
        require(msg.sender == owner, 'No the owner');
        _;
    }


    constructor() public{
        owner = msg.sender;
    }

    function registerAsPatient() public{
        address newPatient = address(new Patient(msg.sender));
        patients.push(newPatient);
        profileAddress[msg.sender] = newPatient;

    }

    function registerAsProvider() public{
        address newProvider = address(new Provider(msg.sender));
        providers.push(newProvider);
        profileAddress[msg.sender] = newProvider;

    }

    function seeRegisteredPatients() public ownerOnly  view returns(address[] memory){
        return patients;
    }

    function seeRegisteredProviders() public ownerOnly view returns(address[] memory){
        return providers;
    }

}


contract Patient{

    address[] public addedProviders;
    mapping(address=>bool) public sentRequests;
    address[] public requests;
    address owner;
    bytes[] public patientFiles;

    modifier ownerOnly{
        require(msg.sender == owner, 'Not the owner!');
        _;
    }

    constructor (address _owner) public{
        owner = _owner;
    }

    function _addAddedProviders(address _providerAddress) public {
        sentRequests[_providerAddress] = false;
        addedProviders.push(_providerAddress);
    }

    function _providerRequests(address _providerAddress) public{
        requests.push(_providerAddress);
    }

    function seeRequests() public view returns(address[] memory){
        return requests;
    }

    function uploadFile(bytes memory _hash) public ownerOnly {
        patientFiles.push(_hash);
    }

    function retrieveFile(bytes memory _hash)  public  view ownerOnly  returns(bytes memory){
        return _hash;
    }

    function addProvider(address _providerAddress) public ownerOnly{
        Provider provider = Provider(_providerAddress);
        require(sentRequests[_providerAddress]!=true,'Permission denied');
        provider._patientRequests(address(this));
        sentRequests[_providerAddress] = true;
        requests.push(_providerAddress);
    }


    function RequestsForApproval() public ownerOnly view returns (address[] memory) {
        return requests;
    }

    function acceptProvider(uint _index) public ownerOnly{
        Provider provider = Provider(requests[_index]);
        addedProviders.push(requests[_index]);
        delete requests[_index];
        provider._addAddedPatients(address(this));
    }
}




contract Provider{
    address[] public addedPatients;
    address[] requests;
    mapping (address=>bool) sentRequests;
    address owner;

    modifier ownerOnly{
        require(msg.sender == owner,'Permission denied');
        _;
    }

    constructor(address _owner) public{
        owner = _owner;
    }

    function _addAddedPatients(address _patientAddress) public{
        sentRequests[_patientAddress] = false;
        addedPatients.push(_patientAddress);
    }

    function _patientRequests(address _patientAddress) public{

        requests.push(_patientAddress);
    }

    function addPatient(address _patientAddress) public ownerOnly{
        Patient patient = Patient(_patientAddress);
        require(sentRequests[_patientAddress]!=true, 'Permission denied');
        patient._providerRequests(address(this));
        sentRequests[_patientAddress] = true;
    }

    function RequestsForApproval() public ownerOnly view returns (address[] memory){
        return requests;
    }

    function acceptPatient(uint _index) public ownerOnly{
        Patient patient = Patient(requests[_index]);
        addedPatients.push(requests[_index]);
        delete requests[_index];
        patient._addAddedProviders(address(this));
    }

}
